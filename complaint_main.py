import streamlit as st
import requests
from bs4 import BeautifulSoup
import re
import pandas as pd
#import pywhatkit
from datetime import datetime
import os
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from settings import settings_page
from dataset import dataset_page
import time
from datetime import datetime
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
import webbrowser
import pyautogui
from time import sleep

# –Ω–∞–¥–æ —Å–∫–∞—á–∞—Ç—å –ø–æ –≤–µ—Ä—Å–∏–∏ chrome chromedriver –ø–æ —Å—Å—ã–ª–∫–µ https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
def extract_complaint_info(complaint_url):
    try:
        response = requests.get(complaint_url, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        soup = BeautifulSoup(response.content, 'html.parser')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ –º–µ—Ç–∫–µ "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"
        phone_label = soup.find('div', string=re.compile(r'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', re.I))
        phone = phone_label.find_next('input')['value'] if phone_label else "NULL"
        phone = phone.split(',')[0]
        cleaned_phone = re.sub(r'\D', '', phone)  
        
        
        if cleaned_phone.startswith('8'):
            cleaned_phone = '+7' + cleaned_phone[1:]
        elif cleaned_phone.startswith('7'):
            cleaned_phone = '+7' + cleaned_phone[1:]
        else:
            cleaned_phone = '+7' + cleaned_phone
        fio_label = soup.find('div', string=re.compile(r'–§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', re.I))
        fio = fio_label.find_next('input')['value'] if fio_label else "NULL"

        
        email_label = soup.find('div', string=re.compile(r'E-mail', re.I))
        email = email_label.find_next('input')['value'] if email_label else "NULL"

        return cleaned_phone, fio, email

    except requests.exceptions.RequestException as e:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ {complaint_url}: {e}")
        return "NULL", "NULL", "NULL"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
def scrape_complaint_numbers(base_url, start_range, end_range):
    all_complaints = []

    # –û–±—Ö–æ–¥–∏–º –∂–∞–ª–æ–±—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    for complaint_number in range(start_range, end_range + 1):
        complaint_url = f"{base_url}/reestrcomplaint/preview/{complaint_number}"
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å {complaint_url}")
        fio, phone, email = extract_complaint_info(complaint_url)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
        all_complaints.append([complaint_number, fio, phone, email, False, "", False, ""])

    return all_complaints

def save_to_csv(data, filename="complaints_data.csv"):
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if os.path.exists(filename):
        df_existing = pd.read_csv(filename)
        existing_numbers = df_existing['–ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã'].tolist()
    else:
        existing_numbers = []

    #filtered_data = [entry for entry in data if entry[1].strip() and entry[3].strip()]
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –Ω–æ–º–µ—Ä–∞ –∂–∞–ª–æ–± –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    new_data = [entry for entry in data if entry[0] not in existing_numbers]

    if new_data:
        df_new = pd.DataFrame(new_data, columns=["–ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã", "–¢–µ–ª–µ—Ñ–æ–Ω", "–§–ò–û", "Email", "Whatsapp_Sent", "Whatsapp_Sent_Date", "Email_Sent", "Email_Sent_Date"])
        df_new.to_csv(filename, mode='a', header=not os.path.exists(filename), index=False, encoding='utf-8-sig')
        print(f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {filename}")
    else:
        print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
def load_from_csv_by_range(start_value, end_value, csv_filename='complaints_data.csv'):
    if os.path.exists(csv_filename):
        df = pd.read_csv(csv_filename)
        df = df.dropna(subset=['–¢–µ–ª–µ—Ñ–æ–Ω', 'Email'])
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –Ω–æ–º–µ—Ä–æ–≤ –∂–∞–ª–æ–±
        filtered_df = df[(df['–ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã'] >= start_value) & (df['–ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã'] <= end_value)]

        if not filtered_df.empty:
            return filtered_df
        else:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
    else:
        st.error(f"–§–∞–π–ª {csv_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame()  # –ü—É—Å—Ç–æ–π DataFrame
    
def send_whatsapp_message(phone, message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç WhatsApp Web —Å –Ω—É–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"https://web.whatsapp.com/send?phone={phone}&text={message}"
    webbrowser.open(url)
    time.sleep(20)  # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è –Ω–∞–∂–∞—Ç—å "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
    pyautogui.press('enter')
    
def whatsapp_send():
    # File paths
    csv_file = "complaints_data_test.csv"
    settings_file = "settings.txt"
    df = pd.read_csv(csv_file, encoding="utf-8", dtype={"–¢–µ–ª–µ—Ñ–æ–Ω": str})

    with open(settings_file, "r", encoding="utf-8") as file:
        lines = file.read().split("---")
        message_template = lines[0].strip()

    existing_sent_status = (
        df[df["Whatsapp_Sent"].astype(str).str.lower() == "true"] 
        .groupby("–¢–µ–ª–µ—Ñ–æ–Ω")["Whatsapp_Sent_Date"]
        .first()
        .to_dict()
    )
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    for idx, complaint in df.iterrows():
        phone = str(complaint["–¢–µ–ª–µ—Ñ–æ–Ω"]).strip()  # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        name = (
            complaint["–§–ò–û"].split()[1]
            if isinstance(complaint["–§–ò–û"], str) and len(complaint["–§–ò–û"].split()) > 1
            else "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç"
        )
        whatsapp_sent = str(complaint["Whatsapp_Sent"]).strip().lower()

        # Check if the phone number has already been marked as sent
        if phone in existing_sent_status:
            # Assign True and the existing timestamp to all rows with this phone number
            df.loc[df["–¢–µ–ª–µ—Ñ–æ–Ω"] == phone, "Whatsapp_Sent"] = "True"
            df.loc[df["–¢–µ–ª–µ—Ñ–æ–Ω"] == phone, "Whatsapp_Sent_Date"] = existing_sent_status[phone]
            st.success(f'–ù–æ–º–µ—Ä {phone} {name} —É–∂–µ –±—ã–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!')
            continue

        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if whatsapp_sent == "true" or not phone or phone.lower() == "null":
            continue

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        personalized_message = message_template.replace("NAME", name)

        try:
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            # pywhatkit.sendwhatmsg_instantly(phone, personalized_message, wait_time=30, tab_close=True)
            # time.sleep(30)
            send_whatsapp_message(phone,personalized_message)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            existing_sent_status[phone] = timestamp
            # Update all rows with this phone number
            df.loc[df["–¢–µ–ª–µ—Ñ–æ–Ω"] == phone, "Whatsapp_Sent"] = "True"
            df.loc[df["–¢–µ–ª–µ—Ñ–æ–Ω"] == phone, "Whatsapp_Sent_Date"] = timestamp

            st.success(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä {phone} ({name}).")
        except Exception as e:
            st.error(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–º–µ—Ä {phone} ({name}): {e}")

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CSV
    df.to_csv(csv_file, index=False, encoding="utf-8")
    st.success("–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∏ CSV —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")

def check_website_status(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞"""
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return True
        else:
            return False
    except requests.RequestException:
        return False

# üõ† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if "start_value" not in st.session_state:
    st.session_state.start_value = 0

if "end_value" not in st.session_state:
    st.session_state.end_value = 100

if "filtered_data" not in st.session_state:
    st.session_state.filtered_data = pd.DataFrame()

def main_page():
    whatsapp_send()
    # numbers = ["+77017120164", "+77017120164"]
    # number1 = "+77017120164"
    # text = 'HELLO TUMAR! I LOVE YOU!'
    # send_whatsapp_message(number1, text)
    base_url = "https://goszakup.gov.kz/ru/complaint/"
    st.title("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∂–∞–ª–æ–±–∞–º")
    st.markdown('[–ü–æ—Å–µ—Ç–∏—Ç–µ —Å–∞–π—Ç –≥–æ—Å–∑–∞–∫—É–ø–æ–∫ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–∏–∞–ø–æ–∑–æ–Ω–æ–º](https://goszakup.gov.kz/ru/registry/complaint)')
    #st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–º–µ—Ä–∞–º –∂–∞–ª–æ–± :point_down:")
    st.header("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–º–µ—Ä–∞–º –∂–∞–ª–æ–± :point_down:")

    # –í–≤–æ–¥ —á–∏—Å–µ–ª "–û—Ç" –∏ "–î–æ"
    st.session_state.start_value = st.number_input('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ "–û—Ç":', value=st.session_state.start_value)
    st.session_state.end_value = st.number_input('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ "–î–æ":', value=st.session_state.start_value)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
    if st.button('–í—ã–±—Ä–∞—Ç—å'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
        if not check_website_status(base_url):
            st.error("–û—à–∏–±–∫–∞: –°–∞–π—Ç –≥–æ—Å –∑–∞–∫—É–ø–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã "–î–æ" –±—ã–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ "–û—Ç"
            if st.session_state.start_value > st.session_state.end_value:
                st.error('–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ "–î–æ" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—é "–û—Ç".')
            else:
                st.success(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {st.session_state.start_value} –¥–æ {st.session_state.end_value}")
                complaints_data = scrape_complaint_numbers(base_url, st.session_state.start_value, st.session_state.end_value)
                if complaints_data:
                    save_to_csv(complaints_data)
                    st.success(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.")
                st.session_state.filtered_data = load_from_csv_by_range(st.session_state.start_value, st.session_state.end_value)
                if not st.session_state.filtered_data.empty:
                    st.write("–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    st.dataframe(st.session_state.filtered_data) 
                    whatsapp_send()
                else:
                    st.write("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")

def main():
    st.sidebar.title("–ú–µ–Ω—é")
    page = st.sidebar.radio("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞:", ["–ì–ª–∞–≤–Ω–∞—è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"])

    if page == "–ì–ª–∞–≤–Ω–∞—è":
        main_page()
    elif page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings_page()     
    elif page == "–ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤":
        dataset_page()

if __name__ == "__main__":
    main()
